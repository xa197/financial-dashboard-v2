import streamlit as st
import pandas as pd
import yfinance as yf
from datetime import datetime
import os

st.set_page_config(layout="wide", page_title="Suivi des Pr√©dictions")

# --- PARAM√àTRES ---
PREDICTIONS_LOG_FILE = "predictions_log.csv"

# --- FONCTIONS ---
@st.cache_data(ttl=60) # On cache le chargement pour 1 minute
def load_predictions_log():
    """Charge le fichier de log des pr√©dictions s'il existe."""
    if os.path.exists(PREDICTIONS_LOG_FILE):
        return pd.read_csv(PREDICTIONS_LOG_FILE)
    return None

def update_predictions(df):
    """Met √† jour les pr√©dictions dont la date cible est pass√©e."""
    now = datetime.now()
    # On convertit les colonnes de date en datetime pour la comparaison
    df['Timestamp'] = pd.to_datetime(df['Timestamp'])
    df['Date Cible'] = pd.to_datetime(df['Date Cible'])

    # On ne met √† jour que les lignes "En attente" dont la date cible est pass√©e
    updates_needed = df[(df['Statut'] == 'En attente') & (df['Date Cible'] < now)].copy()
    
    if updates_needed.empty:
        st.info("Aucune nouvelle pr√©diction √† mettre √† jour.")
        return df, 0 # Retourne le df original et 0 mise √† jour

    updated_count = 0
    with st.spinner(f"Mise √† jour de {len(updates_needed)} pr√©dictions..."):
        for index, row in updates_needed.iterrows():
            try:
                # On r√©cup√®re le prix r√©el √† la date cible
                real_data = yf.download(row['Ticker'], start=row['Date Cible'].date(), interval="1h")
                if not real_data.empty:
                    # On trouve le prix le plus proche de notre heure cible
                    real_price = real_data['Close'].iloc[0]
                    
                    # On met √† jour le DataFrame principal √† la bonne ligne
                    df.loc[index, 'Prix R√©el'] = real_price
                    
                    # Calcul de l'erreur
                    error_pct = ((real_price - row['Prix Pr√©dit']) / row['Prix Actuel']) * 100
                    df.loc[index, 'Erreur (%)'] = error_pct
                    
                    # D√©termination du statut
                    predicted_direction = row['Prix Pr√©dit'] > row['Prix Actuel']
                    real_direction = real_price > row['Prix Actuel']
                    df.loc[index, 'Statut'] = "R√©ussie" if predicted_direction == real_direction else "√âchou√©e"
                    
                    updated_count += 1
            except Exception:
                df.loc[index, 'Statut'] = "Erreur M√†J" # Erreur lors de la mise √† jour
    
    # On sauvegarde le fichier mis √† jour
    if updated_count > 0:
        df.to_csv(PREDICTIONS_LOG_FILE, index=False)
    
    return df, updated_count

# --- INTERFACE ---
st.title("üìä Suivi de la Performance de l'IA")
st.write("Cette page analyse les pr√©dictions pass√©es pour √©valuer la fiabilit√© du mod√®le.")

log_df = load_predictions_log()

if log_df is None:
    st.warning("Aucun fichier de log de pr√©dictions (`predictions_log.csv`) trouv√©.")
    st.info("Veuillez d'abord g√©n√©rer des pr√©dictions depuis la page 'G√©n√©rateur de Pr√©dictions IA'.")
else:
    # --- Mise √† jour des donn√©es ---
    updated_df, count = update_predictions(log_df.copy()) # On travaille sur une copie
    if count > 0:
        st.success(f"{count} pr√©dictions ont √©t√© mises √† jour avec les r√©sultats r√©els !")

    # --- Affichage des statistiques ---
    completed_predictions = updated_df[updated_df['Statut'].isin(['R√©ussie', '√âchou√©e'])]
    
    st.subheader("Statistiques Globales")
    if not completed_predictions.empty:
        total_completed = len(completed_predictions)
        success_rate = (completed_predictions['Statut'] == 'R√©ussie').sum() / total_completed * 100
        mean_error = completed_predictions['Erreur (%)'].abs().mean()

        col1, col2, col3 = st.columns(3)
        col1.metric("Pr√©dictions √âvalu√©es", f"{total_completed}")
        col2.metric("Taux de R√©ussite (Direction)", f"{success_rate:.2f}%")
        col3.metric("Erreur Moyenne Absolue", f"{mean_error:.2f}%")
        
        # Performance par horizon
        st.subheader("Performance par Horizon")
        perf_by_horizon = completed_predictions.groupby('Horizon')['Statut'].apply(
            lambda x: (x == 'R√©ussie').sum() / len(x) * 100
        ).sort_values(ascending=False)
        st.dataframe(perf_by_horizon.reset_index().rename(columns={'Statut': 'Taux de R√©ussite (%)'}), use_container_width=True)

    else:
        st.info("Aucune pr√©diction n'a encore √©t√© √©valu√©e. Revenez plus tard.")

    # --- Affichage du log complet ---
    st.subheader("Historique Complet des Pr√©dictions")
    st.dataframe(updated_df, use_container_width=True)